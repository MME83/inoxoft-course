{
  "swagger": "2.0",
  "info": {
    "title": "API Documentation",
    "version": "0.0.1",
    "description": "InoXoft task-12"
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Auth process..."
    },
    {
      "name": "Users",
      "description": "Operations with users"
    },
    {
      "name": "Building",
      "description": "Operations with building..."
    },
    {
      "name": "Flats",
      "description": "Operations with flats..."
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all users",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Token to authorize",
            "default": "admin token need",
            "required": true
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Quantity items on page",
            "required": false,
            "default": 10,
            "type": "number"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "default": 1,
            "type": "number"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorting data",
            "required": false,
            "default": "createdAt",
            "type": "string"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order data",
            "required": false,
            "default": "asc",
            "type": "string",
            "enum": ["asc", "desc", null]
          },
          {
            "name": "role",
            "in": "query",
            "description": "Array of user rols",
            "required": false,
            "default": "user",
            "type": "string",
            "enum": ["user", "admin"]
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email",
            "required": false,
            "default": "user@gmail.com",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "User name",
            "required": false,
            "default": "Test Name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetUsersSchema"
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/UnAuthorizedErrorSchema"
            }
          },
          "404": {
            "description": "No users found",
            "schema": {
              "$ref": "#/definitions/NoUsersErrorSchema"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Token to authorize",
            "default": "admin_token",
            "required": true
          },
          {
            "name": "email",
            "in": "formData",
            "type": "string",
            "description": "User email",
            "default": "exm@gmail.com",
            "required": true
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string",
            "description": "User password",
            "default": "Pass123#",
            "required": true
          },
          {
            "name": "role",
            "in": "formData",
            "type": "string",
            "description": "User role",
            "default": "user",
            "enum": ["user", "admin"]
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User Role created, email for reset password was sent"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/UnAuthorizedErrorSchema"
            }
          },
          "403": {
            "description": "Forbidden origin",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          },
          "400": {
            "description": "Body validation Error",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "error.detailes[0].message"
                }
              }
            }
          },
          "409": {
            "description": "Email already exists",
            "schema": {
              "$ref": "#/definitions/EmailExistErrorSchema"
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get user by user_id",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "User or Admin Token to authorize",
            "default": "FFF",
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "type": "string",
            "description": "User _id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserSchema"
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/UnAuthorizedErrorSchema"
            }
          },
          "403": {
            "description": "Permission role and Id",
            "schema": {
              "$ref": "#/definitions/RoleAndIdPermissionErrorSchema"
            }
          },
          "400": {
            "description": "User id invalid",
            "schema": {
              "$ref": "#/definitions/userIdIncorrectErrorSchema"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NoUserErrorSchema"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "description": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Admin token",
            "default": "FFF",
            "required": true
          },
          {
            "name": "user_Id",
            "in": "path",
            "type": "string",
            "description": "User _id",
            "required": true
          },
          {
            "name": "name",
            "in": "formData",
            "type": "string",
            "description": "User name",
            "required": false
          },
          {
            "name": "email",
            "in": "formData",
            "type": "string",
            "description": "User email",
            "required": false
          },
          {
            "name": "password",
            "in": "formData",
            "type": "string",
            "description": "User password",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserSchema"
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/UnAuthorizedErrorSchema"
            }
          },
          "403": {
            "description": "No permission by role or Id",
            "schema": {
              "$ref": "#/definitions/RoleAndIdPermissionErrorSchema"
            }
          },
          "400": {
            "description": "User id or body validation Error",
            "schema": {
              "$ref": "#/definitions/userIdIncorrectErrorSchema"
            }
          },
          "404": {
            "description": "User no found",
            "schema": {
              "$ref": "#/definitions/NoUserErrorSchema"
            }
          },
          "409": {
            "description": "Email already exists",
            "schema": {
              "$ref": "#/definitions/EmailExistErrorSchema"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Admin token",
            "default": "FFF",
            "required": true
          },
          {
            "name": "user_id",
            "in": "path",
            "type": "string",
            "description": "User _id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User has deleted"
                }
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/UnAuthorizedErrorSchema"
            }
          },
          "403": {
            "description": "Only admin has permission",
            "schema": {
              "$ref": "#/definitions/RolePermissionErrorSchema"
            }
          },
          "400": {
            "description": "User id validation Error",
            "schema": {
              "$ref": "#/definitions/userIdIncorrectErrorSchema"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/NoUserErrorSchema"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GetUsersSchema": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/UsersSchema"
        },
        "page": {
          "description": "Page",
          "type": "integer",
          "example": 1
        },
        "limit": {
          "description": "Items per page",
          "type": "integer",
          "example": 10
        },
        "count": {
          "description": "Quantity of all items",
          "type": "integer",
          "example": 22
        },
        "pageCount": {
          "description": "Page count",
          "type": "integer",
          "example": 1
        }
      }
    },
    "UsersSchema": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserSchema"
      }
    },
    "UserSchema": {
      "type": "object",
      "properties": {
        "_id": {
          "description": "user_id",
          "type": "string",
          "example": "mongoDb_id"
        },
        "email": {
          "description": "User email",
          "type": "string",
          "example": "j.doe@gmail.com"
        },
        "role": {
            "description": "User role",
            "type": "string",
            "example": "user"
          },
        "createdAt": {
          "description": "Date when user created",
          "type": "string",
          "example": "2021-01-01T00:00:00.000Z"
        },
        "updatedAt": {
          "description": "Date when user updated",
          "type": "string",
          "example": "2021-01-01T00:00:00.000Z"
        },
        "flats": {
            "description": "Array of flat _id's",
            "type": "array",
            "example": "[_id1, _id2, _idn]"
        }
      }
    },
    "UnAuthorizedErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Invalid token"
        }
      }
    },
    "NoUsersErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "No users found"
        }
      }
    },
    "EmailExistErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "The Email is already exists"
        }
      }
    },
    "NoUserErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },
    "RolePermissionErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Forbidden"
        }
      }
    },
    "RoleAndIdPermissionErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Forbidden"
        }
      }
    },
    "userIdIncorrectErrorSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "User id invalid"
        }
      }
    }
  }
}
